const uploader = async (file: File, moduleId: string, sequence: number) => {
	if (!file) {
		toast.error("No file selected");
		return;
	}

	if (!moduleId) {
		toast.error("Invalid module ID");
		return;
	}

	const token = Cookies.get("CLASSORE_ADMIN_TOKEN");
	if (!token) {
		toast.error("Authentication token missing");
		return;
	}

	const chunkSize = 5 * 1024 * 1024; // 5MB chunks
	const totalChunks = Math.ceil(file.size / chunkSize);
	const chunkProgress = 100 / totalChunks;
	const maxRetries = 3;
	const initialRetryDelay = 1000;

	const uploadChunk = async (chunkNumber: number): Promise<void> => {
		const start = chunkNumber * chunkSize;
		const end = Math.min(start + chunkSize, file.size);
		const chunk = file.slice(start, end);
		const formData = new FormData();
		formData.append("videos", chunk);
		formData.append("sequence", sequence.toString());
		formData.append("chunkNumber", chunkNumber.toString());
		formData.append("totalChunks", totalChunks.toString());

		const currentProgress = Math.round((chunkNumber / totalChunks) * 100);
		setUploadProgress(currentProgress);

		let retries = maxRetries;
		let delay = initialRetryDelay;

		while (retries >= 0) {
			try {
				const controller = new AbortController();
				const timeoutId = setTimeout(() => controller.abort(), 30000);
				const response = await fetch(
					`${process.env.NEXT_PUBLIC_API_URL}/admin/learning/chapter-module/update-one/${moduleId}`,
					{
						method: "PUT",
						body: formData,
						headers: {
							Authorization: `Bearer ${token}`,
						},
						keepalive: true,
						signal: abortController.current?.signal,
					}
				);
				clearTimeout(timeoutId);

				if (!response.ok) {
					const errorData = await response.json();
					console.error("Upload error details:", {
						status: response.status,
						statusText: response.statusText,
						error: errorData,
					});
					throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
				}

				await response.json();
				setUploadProgress(Number((chunkNumber + 1) * chunkProgress));
				return;
			} catch (error) {
				console.error(`Chunk upload error:`, error);
				if (retries === 0) {
					throw error;
				}
				await new Promise((resolve) => setTimeout(resolve, delay));
				delay *= 2;
				retries--;
			}
		}
	};

	try {
		setIsLoading(true);
		abortController.current = new AbortController();
		for (let chunkNumber = 0; chunkNumber < totalChunks; chunkNumber++) {
			if (abortController.current?.signal.aborted) {
				throw new Error("Upload cancelled");
			}
			await uploadChunk(chunkNumber);
		}
		setUploadProgress(100);
		toast.success("File upload completed");
	} catch (error) {
		console.error("Upload failed:", error);
		toast.error(error instanceof Error ? error.message : "Upload failed");
	} finally {
		setIsLoading(false);
		setUploadProgress(0);
		clearFiles();
		abortController.current = null;
	}
};


/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
<-------------------------------------------------------------------------------------------------------------->
<==============================================================================================================>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<==============================================================================================================>
<-------------------------------------------------------------------------------------------------------------->
\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/


const uploadChunk = async (chunkNumber: number, file: File, sequence: number): Promise<void> => {
	const chunkSize = 1024 * 1024 * 10;
	const start = chunkNumber * chunkSize;
	const end = Math.min(start + chunkSize, file.size);
	const chunk = file.slice(start, end);
	const formData = new FormData();

	const totalChunks = Math.ceil(file.size / chunkSize);
	const chunkBlob = new Blob([chunk], { type: file.type });
	formData.append("videos", chunkBlob, `${file.name}.part${chunkNumber}`);
	formData.append("sequence", sequence.toString());
	formData.append("chunkNumber", chunkNumber.toString());
	formData.append("totalChunks", totalChunks.toString());
	formData.append("totalSize", file.size.toString());
	formData.append("chunkSize", chunkSize.toString());
	formData.append("originalName", file.name);

	try {
		const controller = new AbortController();
		const timeoutId = setTimeout(() => controller.abort(), 30000);

		console.log(`Uploading chunk ${chunkNumber + 1}/${totalChunks}`, {
			start,
			end,
			size: chunk.size,
			type: file.type,
		});

		const response = await fetch(
			`${process.env.NEXT_PUBLIC_API_URL}/admin/learning/chapter-module/update-one/${moduleId}`,
			{
				method: "PUT",
				body: formData,
				headers: {
					Authorization: `Bearer ${Cookies.get("CLASSORE_ADMIN_TOKEN")}`,
					Accept: "application/json",
					// Don't set Content-Type - let the browser set it with the boundary
				},
				signal: controller.signal,
			}
		);

		clearTimeout(timeoutId);

		if (!response.ok) {
			const errorData = await response.json();
			throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
		}

		const data = await response.json();
		console.log(`Chunk ${chunkNumber + 1} uploaded successfully:`, data);

		setUploadProgress(Math.round(((chunkNumber + 1) / totalChunks) * 100));
	} catch (error) {
		console.error(`Chunk ${chunkNumber + 1} upload failed:`, error);
		throw error;
	}
};

const uploader = async (file: File, moduleId: string, sequence: number) => {
	if (!file) {
		toast.error("No file selected");
		return;
	}

	if (!moduleId) {
		toast.error("Invalid module ID");
		return;
	}

	const token = Cookies.get("CLASSORE_ADMIN_TOKEN");
	if (!token) {
		toast.error("Authentication token missing");
		return;
	}

	const chunkSize = 2 * 1024 * 1024; // 2MB chunks
	const totalChunks = Math.ceil(file.size / chunkSize);

	try {
		setIsLoading(true);
		abortController.current = new AbortController();

		console.log("Starting chunked upload:", {
			fileName: file.name,
			fileSize: file.size,
			totalChunks,
			chunkSize,
		});

		for (let chunkNumber = 0; chunkNumber < totalChunks; chunkNumber++) {
			if (abortController.current?.signal.aborted) {
				throw new Error("Upload cancelled");
			}
			await uploadChunk(chunkNumber, file, sequence);
		}

		setUploadProgress(100);
		toast.success("File upload completed");
	} catch (error) {
		console.error("Upload failed:", error);
		toast.error(error instanceof Error ? error.message : "Upload failed");
	} finally {
		setIsLoading(false);
		setUploadProgress(0);
		clearFiles();
		abortController.current = null;
	}
};